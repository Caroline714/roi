
================== 简介 ==================
1. Scala是一门类Java的编程语言，大量使用java的类库和变量。
2. 面向对象和函数式编程无缝结合+简洁（语法简化）。
3. 融汇了许多前所未有的特性，同时又运行于JVM之上。
4. Scala始于2001年，由洛桑联邦理工学院(EPFL)的编程方法实验室研发。2003年11月发布1.0版本。
5. Python: 发明一种每个人都能使用的简易语言，但Python并不追求快。
   Java:   强编译型。
   Scala:  5.1 运行速度快。是其他语言，尤其是Python、Ruby、甚至是Go都没有的优势。
           5.2 多样化。既可以像写python一样，通过简单的代码实现复杂的功能；当需要提升速度时，又能重构获取大幅的速度提升。
   由于Scala是基于JVM的数据分析和处理，速度比Python快{10}倍.
   在调用Spark库时速度优势明显。
   但是Scala的数据分析库不如python丰富。
6.




================== 特性 ==================
1. 纯面向对象：每个值都是一个对象，对象的类型和行为由类定义。
2. 函数式编程：每个函数都是一个值。
4. 静态类型：Scala是一个静态语言，更适合大型工程项目，Scala直接编译成Java字节码，性能接近Java。
5. 扩展性：Scala可以和Java无缝衔接，Scala类可以调用Java方法，创建Java对象，继承Java类和实现Java接口。这些都不需要额外的接口定义或者胶合代码。
6. 并发性：--------------------
9. Scala能调用绝大部分的Java，而Java调用Scala独有的东西会比较难。
10.Scala对二进制不兼容，语法也越来越复杂，不能突破Bytecode的限制。----------------------




================== 数据类型 ==================
   Byte,short,Int,Long,Float,Double,Char,String,Boolean,Unit,Null,Nothing,Any,AnyRef
   [
       Any是abstract类，它是Scala类继承结构中最底层的。所有运行环境中的scala类都是直接或间接继承自Any这个类，它就是其它语言（.Net，Java等）中的Object，是所有其他类的超类。
       Nothing是所有类型的子类，Nothing没有对象，但是可以用来定义类型，例如一个方法抛出异常，则不论该方法应该返回哪种类型，异常的返回值可以是Nothing。
       AnyRef是所有引用类型的基类。
   ]
1. 以上数据类型都是对象，也就是说scala没有java中的原生类型。
2. 在scala是可以对数字等基础类型调用方法的。
3. Int型：123，Long型：123L
4. Double型：0.5，Float型：0.5F



================== 类与对象 ==================
1. 类是对象的抽象，而对象是类的具体实例。类是抽象的，不占用内存，而对象是具体的，占用存储空间。
2. 类的声明与实例化调用。
3. 一个Scala源文件中可以有多个类。
4. 重写一个非抽象方法必须使用override修饰符。
5. 只有主构造函数才可以往基类的构造函数里写参数。
6. 在子类中重写超类的抽象方法时，不需要使用override关键字。
7. 继承会继承父类的所有属性和方法，Scala 只允许继承一个父类。(extends)
8. 单例模式Object(类比Static)，object对象不能带参数。
9. 修饰符+ name:type = value。



================== 方法与函数 ==================
1. Scala 访问修饰符基本和Java的一样，分别有：private，protected，public。
2. import语句可以出现在任何地方，而不是只能在文件顶部。
   import的效果从开始延伸到语句块的结束，这样可以大幅减少名称冲突的可能性。
3. val 语句可以定义函数，def 语句定义方法。
4. 方法是组成类的一部分,函数则是一个完整的对象。
5. 如果方法没有返回值，可以返回为 Unit，这个类似于 Java 的 void。
6. 类名示例：class MyFirstScalaClass   每个单词的第一个字母大写
7. 方法名示例：def myMethodName()     第一个字母小写
8. Scala 抛出异常的方法和 Java一样，使用 throw 方法，如：throw new IllegalArgumentException。
9. Scala程序从main()方法开始处理，这是每一个Scala程序的强制程序入口部分。



================ Scala Trait ================
1. Scala Trait(特征) 相当于 Java 的接口



================== 特殊符号 ==================
1. -> 创建map时使用，表示映射（val score = Map("小明" -> 50, "小红" -> 60)）
2. <- 在遍历时使用。（for(man <- people){}）
3. => 3.1 创建匿名函数时使用
          val arr = List(1,2,3)
          arr.map(x => x+1).foreach(x => println(x))
      3.2 在match中使用
          match{
                  case "a" => 90
                  case _ => 59
              }
4. 自定义
   def -->(): Unit ={}
Scala中的箭头都是方法。

5. :: 普通元素与列表的连接
   val c = 1 :: List(1,2)
6. ::: 两个列表的连接
   val c = List(1,2) ::: List(3,4)