
================== 简介 ==================
1. Scala是基于java之上，大量使用java的类库和变量，使用 Scala 之前必须先安装 Java（>1.5版本）。
2. 程序文件的名称应该与对象名称完全匹配(新版本不需要了，但建议保留这种习惯)。
   假设"HelloWorld"是对象的名称。那么该文件应保存为'HelloWorld.scala"
3. Scala程序从main()方法开始处理，这是每一个Scala程序的强制程序入口部分。
4. import语句可以出现在任何地方，而不是只能在文件顶部.
   import的效果从开始延伸到语句块的结束。这可以大幅减少名称冲突的可能性。


================== 特性 ==================
1. 面向对象
2. 函数式编程
3. 支持高阶函数，允许嵌套多层函数，并支持柯里化
4. 静态类型
5. 扩展性
6. 并发性
7. 大小写敏感
8. 修饰符+ name:type = value


================== 数据类型 ==================
   Byte,short,Int,Long,Float,Double,Char,String,Boolean,Unit,Null,Nothing,Any,AnyRef
1. 以上数据类型都是对象，也就是说scala没有java中的原生类型。
2. 在scala是可以对数字等基础类型调用方法的。
3. Int型：123，Long型：123L
4. Double型：0.5，Float型：0.5F


================== 方法与函数 ==================
1. Scala 访问修饰符基本和Java的一样，分别有：private，protected，public。
2. val 语句可以定义函数，def 语句定义方法。
3. 方法是组成类的一部分,函数则是一个完整的对象。
4. 如果方法没有返回值，可以返回为 Unit，这个类似于 Java 的 void。
5. 类名示例：class MyFirstScalaClass   每个单词的第一个字母大写
6. 方法名示例：def myMethodName()     第一个字母小写
7. Scala 抛出异常的方法和 Java一样，使用 throw 方法，如：throw new IllegalArgumentException


================== 类与对象 ==================
1. 类是对象的抽象，而对象是类的具体实例。类是抽象的，不占用内存，而对象是具体的，占用存储空间。
2. 类的声明与实例化调用。
3. 一个Scala源文件中可以有多个类。
4. 重写一个非抽象方法必须使用override修饰符。
5. 只有主构造函数才可以往基类的构造函数里写参数。
6. 在子类中重写超类的抽象方法时，不需要使用override关键字。
7. 继承会继承父类的所有属性和方法，Scala 只允许继承一个父类。(extends)
8. 单例模式Object(类比Static)，object对象不能带参数。



================ Scala Trait ================
1. Scala Trait(特征) 相当于 Java 的接口
